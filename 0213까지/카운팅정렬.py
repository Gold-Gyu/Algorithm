# 카운팅 정렬
def counting_sort_asc(A, B, k):
    # A : 정렬대상
    # B : 정렬결과
    # k : 정렬 대상 중 최대값
    # C : 카운트배열(원소의 개수를 세주고, 자리를 정해준다.)
    C = [0] * (k+1)

    #1. 원소의 등장횟수를 센다.
    for i in range(len(A)):
        # A[i]의 등장횟수를 증가 시켜준다.
        # C[A[i]] = A[i]의 등장횟수
        C[A[i]] += 1

    #2. 각 원소의 등장횟수를 계산해서 내가 들어갈 자리의 위치를 구해준다.
    for i in range(1, len(C)):
        # i 번째 원소의 앞에 몇개의 원소가 있는지 확인하면
        # i 번째 원소가 최소 몇 번째 부터 등장하게 되는지 결과배열의 자리를 알 수 있게 된다.
        C[i] += C[i-1]


    #3. 뒤에서부터 A를 확인하면서 자리를 확인하고 채워준다
    # 자리를채울때마다 1 감소시켜야 다음 원소가 들어올떄 자리 중복을 안한다.

    for i in range(len(B)-1, -1, -1):
        # C[A[i]] => A[i] 원소가 들어갈 자리(들어가기 전에 -1 해준다
        C[A[i]] -= 1

        # 정렬 결과 대상의 자리에 A[i]를 넣어준다
        B[C[A[i]]] = A[i]


nums = [0, 4, 1, 3, 1, 2, 4, 1]
result_asc = [0] * 8
counting_sort_asc(nums, result_asc, max(nums))

print(result_asc)